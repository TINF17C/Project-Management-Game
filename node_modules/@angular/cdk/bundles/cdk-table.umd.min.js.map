{"version":3,"file":"cdk-table.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/cdk/table/table-errors.ts","../../src/cdk/table/cell.ts","../../src/cdk/table/row.ts","../../src/cdk/table/table.ts","../../src/cdk/table/table-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nexport function getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nexport function getTableMissingMatchingRowDefError(data: any) {\n  return Error(`Could not find a matching row definition for the` +\n      `provided row data: ${JSON.stringify(data)}`);\n}\n\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nexport function getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' +\n      'cannot determine which columns should be rendered.');\n}\n\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nexport function getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentChild, Directive, ElementRef, Input, TemplateRef} from '@angular/core';\n\n/** Base interface for a cell definition. Captures a column's cell template definition. */\nexport interface CellDef {\n  template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({selector: '[cdkCellDef]'})\nexport class CdkCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkHeaderCellDef]'})\nexport class CdkHeaderCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({selector: '[cdkFooterCellDef]'})\nexport class CdkFooterCellDef implements CellDef {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n@Directive({selector: '[cdkColumnDef]'})\nexport class CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('cdkColumnDef')\n  get name(): string { return this._name; }\n  set name(name: string) {\n    // If the directive is set without a name (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (!name) { return; }\n\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  _name: string;\n\n  /** @docs-private */\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\n\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName: string;\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n    elementRef.nativeElement.classList.add(columnClassName);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n  host: {\n    'class': 'cdk-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-cell, td[cdk-cell]',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n})\nexport class CdkCell extends BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    super(columnDef, elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  OnChanges,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkCellDef, CdkColumnDef} from './cell';\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nexport abstract class BaseRowDef implements OnChanges {\n  /** The columns to be displayed on this row. */\n  columns: Iterable<string>;\n\n  /** Differ used to check if any changes were made to the columns. */\n  protected _columnsDiffer: IterableDiffer<any>;\n\n  constructor(/** @docs-private */ public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    const columns = changes['columns'].currentValue || [];\n    if (!this._columnsDiffer) {\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  abstract extractCellTemplate(column: CdkColumnDef): TemplateRef<any>;\n}\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n})\nexport class CdkHeaderRowDef extends BaseRowDef {\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    return column.headerCell.template;\n  }\n}\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkFooterRowDef]',\n  inputs: ['columns: cdkFooterRowDef'],\n})\nexport class CdkFooterRowDef extends BaseRowDef {\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    return column.footerCell.template;\n  }\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n})\nexport class CdkRowDef<T> extends BaseRowDef {\n  /**\n   * Function that should return true if this row template should be used for the provided index\n   * and row data. If left undefined, this row will be considered the default row template to use\n   * when no other when functions return true for the data.\n   * For every row, there must be at least one when function that passes or an undefined to default.\n   */\n  when: (index: number, rowData: T) => boolean;\n\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    return column.cell.template;\n  }\n}\n\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n */\nexport interface CdkCellOutletMultiRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  dataIndex?: number;\n\n  /** Index location of the rendered row that this cell is located within. */\n  renderIndex?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n@Directive({selector: '[cdkCellOutlet]'})\nexport class CdkCellOutlet {\n  /** The ordered list of cells to render within this outlet's view container */\n  cells: CdkCellDef[];\n\n  /** The data context to be provided to each cell */\n  context: any;\n\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n  static mostRecentCellOutlet: CdkCellOutlet | null = null;\n\n  constructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-header-row, tr[cdk-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkHeaderRow { }\n\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-row, tr[cdk-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  TemplateRef,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {BehaviorSubject, Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {CdkColumnDef} from './cell';\nimport {\n  BaseRowDef,\n  CdkCellOutlet,\n  CdkCellOutletMultiRowContext,\n  CdkCellOutletRowContext,\n  CdkFooterRowDef,\n  CdkHeaderRowDef,\n  CdkRowDef\n} from './row';\nimport {\n  getTableDuplicateColumnNameError,\n  getTableMissingMatchingRowDefError,\n  getTableMissingRowDefsError,\n  getTableMultipleDefaultRowDefsError,\n  getTableUnknownColumnError,\n  getTableUnknownDataSourceError\n} from './table-errors';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n  viewContainer: ViewContainerRef;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n@Directive({selector: '[rowOutlet]'})\nexport class DataRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n@Directive({selector: '[headerRowOutlet]'})\nexport class HeaderRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n@Directive({selector: '[footerRowOutlet]'})\nexport class FooterRowOutlet implements RowOutlet {\n  constructor(public viewContainer: ViewContainerRef, public elementRef: ElementRef) { }\n}\n\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nexport const CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>`;\n\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * @docs-private\n */\nexport interface RowContext<T>\n    extends CdkCellOutletMultiRowContext<T>, CdkCellOutletRowContext<T> { }\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> { }\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * @docs-private\n */\nexport interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}\n\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-table, table[cdk-table]',\n  exportAs: 'cdkTable',\n  template: CDK_TABLE_TEMPLATE,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkTable<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Latest data provided by the data source. */\n  private _data: T[];\n\n  /** List of the rendered rows as identified by their `RenderRow` object. */\n  private _renderRows: RenderRow<T>[];\n\n  /** Subscription that listens for the data provided by the data source. */\n  private _renderChangeSubscription: Subscription | null;\n\n  /**\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n   * any custom column definitions added to `_customColumnDefs`.\n   */\n  private _columnDefsByName = new Map<string,  CdkColumnDef>();\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n   */\n  private _rowDefs: CdkRowDef<T>[];\n\n  /**\n   * Set of all header row definitions that can be used by this table. Populated by the rows\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\n   * `_customHeaderRowDefs`.\n   */\n  private _headerRowDefs: CdkHeaderRowDef[];\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to\n   * `_customFooterRowDefs`.\n   */\n  private _footerRowDefs: CdkFooterRowDef[];\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n  /** Stores the row definition that does not have a when predicate. */\n  private _defaultRowDef: CdkRowDef<T> | null;\n\n  /**\n   * Column definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * column definitions as *it's* content child.\n   */\n  private _customColumnDefs = new Set<CdkColumnDef>();\n\n  /**\n   * Data row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in data rows as *it's* content child.\n   */\n  private _customRowDefs = new Set<CdkRowDef<T>>();\n\n  /**\n   * Header row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in header rows as *it's* content child.\n   */\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\n\n  /**\n   * Footer row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n   * built-in footer row as *it's* content child.\n   */\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\n\n  /**\n   * Whether the header row definition has been changed. Triggers an update to the header row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _headerRowDefChanged = true;\n\n  /**\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _footerRowDefChanged = true;\n\n  /**\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\n   * and understand which rows are added/moved/removed.\n   *\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n   * contains an array of created pairs. The array is necessary to handle cases where the data\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n   * stored.\n   */\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input()\n  get trackBy(): TrackByFunction<T> { return this._trackByFn; }\n  set trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() &&\n        fn != null && typeof fn !== 'function' &&\n        <any>console && <any>console.warn) {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  private _trackByFn: TrackByFunction<T>;\n\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[] | T[];\n\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  @Input()\n  get multiTemplateDataRows(): boolean { return this._multiTemplateDataRows; }\n  set multiTemplateDataRows(v: boolean) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n    if (this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n    }\n  }\n  _multiTemplateDataRows: boolean = false;\n\n  // TODO(andrewseguin): Remove max value as the end index\n  //   and instead calculate the view on init and scroll.\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  viewChange: BehaviorSubject<{start: number, end: number}> =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\n  @ViewChild(DataRowOutlet) _rowOutlet: DataRowOutlet;\n  @ViewChild(HeaderRowOutlet) _headerRowOutlet: HeaderRowOutlet;\n  @ViewChild(FooterRowOutlet) _footerRowOutlet: FooterRowOutlet;\n\n  /**\n   * The column definitions provided by the user that contain what the header, data, and footer\n   * cells should render for each column.\n   */\n  @ContentChildren(CdkColumnDef) _contentColumnDefs: QueryList<CdkColumnDef>;\n\n  /** Set of data row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkRowDef) _contentRowDefs: QueryList<CdkRowDef<T>>;\n\n  /** Set of header row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkHeaderRowDef) _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\n\n  /** Set of footer row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkFooterRowDef) _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\n\n  constructor(protected readonly _differs: IterableDiffers,\n              protected readonly _changeDetectorRef: ChangeDetectorRef,\n              protected readonly _elementRef: ElementRef,\n              @Attribute('role') role: string) {\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n  }\n\n  ngOnInit() {\n    if (this._elementRef.nativeElement.nodeName === 'TABLE') {\n      this._applyNativeTableSections();\n    }\n\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n  }\n\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n      throw getTableMissingRowDefsError();\n    }\n\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    this._renderUpdatedColumns();\n\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n    this._headerRowOutlet.viewContainer.clear();\n    this._footerRowOutlet.viewContainer.clear();\n\n    this._cachedRenderRowsMap.clear();\n\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this.dataSource instanceof DataSource) {\n      this.dataSource.disconnect(this);\n    }\n  }\n\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) { return; }\n\n    const viewContainer = this._rowOutlet.viewContainer;\n    changes.forEachOperation(\n        (record: IterableChangeRecord<RenderRow<T>>, prevIndex: number, currentIndex: number) => {\n          if (record.previousIndex == null) {\n            this._insertRow(record.item, currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(prevIndex);\n          } else {\n            const view = <RowViewRef<T>>viewContainer.get(prevIndex);\n            viewContainer.move(view!, currentIndex);\n          }\n        });\n\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\n      rowView.context.$implicit = record.item.data;\n    });\n  }\n\n  /**\n   * Sets the header row definition to be used. Overrides the header row definition gathered by\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n   * table's content is checked.\n   * @docs-private\n   * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n   * @deletion-target 8.0.0\n   */\n  setHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs = new Set([headerRowDef]);\n    this._headerRowDefChanged = true;\n  }\n\n  /**\n   * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n   * table's content is checked.\n   * @docs-private\n   * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n   * @deletion-target 8.0.0\n   */\n  setFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs = new Set([footerRowDef]);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.add(rowDef);\n  }\n\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.delete(rowDef);\n  }\n\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  private _getAllRenderRows(): RenderRow<T>[] {\n    const renderRows: RenderRow<T>[] = [];\n\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef)!.push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  private _getRenderRowsForData(\n      data: T, dataIndex: number, cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>): RenderRow<T>[] {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef)! : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift()!;\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {data, rowDef, dataIndex};\n      }\n    });\n  }\n\n  /** Update the map containing the content's column definitions. */\n  private _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n\n    const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n\n  /** Update the list of all available row definitions that can be used. */\n  private _cacheRowDefs() {\n    this._headerRowDefs =\n        mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n    this._footerRowDefs =\n        mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n    this._rowDefs =\n        mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display.\n   * If there is a diff, then re-render that section.\n   */\n  private _renderUpdatedColumns() {\n    const defColumnsDiffReducer = (accumulator, def) => accumulator || !!def.getColumnsDiff();\n\n    if (this._rowDefs.reduce(defColumnsDiffReducer, false)) {\n      this._forceRenderDataRows();\n    }\n\n    if (this._headerRowDefs.reduce(defColumnsDiffReducer, false)) {\n      this._forceRenderHeaderRows();\n    }\n\n    if (this._footerRowDefs.reduce(defColumnsDiffReducer, false)) {\n      this._forceRenderFooterRows();\n    }\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    this._data = [];\n\n    if (this.dataSource instanceof DataSource) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) { return; }\n\n    let dataStream: Observable<T[]> | undefined;\n\n    // Check if the datasource is a DataSource object by observing if it has a connect function.\n    // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n    // checked as an instanceof DataSource<T> since the table should allow for data sources\n    // that did not explicitly extend DataSource<T>.\n    if ((this.dataSource as DataSource<T>).connect  instanceof Function) {\n      dataStream = (this.dataSource as DataSource<T>).connect(this);\n    } else if (this.dataSource instanceof Observable) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = observableOf(this.dataSource);\n    }\n\n    if (dataStream === undefined) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream\n        .pipe(takeUntil(this._onDestroy))\n        .subscribe(data => {\n          this._data = data || [];\n          this.renderRows();\n        });\n  }\n\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  private _forceRenderHeaderRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n  }\n\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  private _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n  }\n\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\n    if (this._rowDefs.length == 1) { return [this._rowDefs[0]]; }\n\n    let rowDefs: CdkRowDef<T>[] = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef =\n          this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n\n  /**\n   * Create the embedded view for the data row template and place it in the correct index location\n   * within the data row view container.\n   */\n  private _insertRow(renderRow: RenderRow<T>, renderIndex: number) {\n    const rowDef = renderRow.rowDef;\n    const context: RowContext<T> = {$implicit: renderRow.data};\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n  }\n\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  private _renderRow(\n      outlet: RowOutlet, rowDef: BaseRowDef, index: number, context: RowContext<T> = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  private _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\n      const context = viewRef.context as RowContext<T>;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n\n  /** Gets the column definitions for the provided row def. */\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n    if (!rowDef || !rowDef.columns) { return []; }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n  private _applyNativeTableSections() {\n    const sections = [\n      {tag: 'thead', outlet: this._headerRowOutlet},\n      {tag: 'tbody', outlet: this._rowOutlet},\n      {tag: 'tfoot', outlet: this._footerRowOutlet},\n    ];\n\n    for (const section of sections) {\n      const element = document.createElement(section.tag);\n      element.appendChild(section.outlet.elementRef.nativeElement);\n      this._elementRef.nativeElement.appendChild(element);\n    }\n  }\n\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  private _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n}\n\n/** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\nfunction  mergeQueryListAndSet<T>(queryList: QueryList<T>, set: Set<T>): T[] {\n  return queryList.toArray().concat(Array.from(set));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowOutlet, DataRowOutlet, CdkTable, FooterRowOutlet} from './table';\nimport {\n  CdkCellOutlet, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow,\n  CdkRowDef\n} from './row';\nimport {\n  CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef,\n  CdkFooterCellDef, CdkFooterCell\n} from './cell';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkFooterCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkFooterCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  DataRowOutlet,\n  HeaderRowOutlet,\n  FooterRowOutlet,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS\n\n})\nexport class CdkTableModule { }\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","name","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","setPrototypeOf","__proto__","Array","p","hasOwnProperty","CdkCellDef","template","type","Directive","args","selector","TemplateRef","CdkHeaderCellDef","CdkFooterCellDef","defineProperty","CdkColumnDef","_name","cssClassFriendlyName","replace","Input","cell","ContentChild","headerCell","footerCell","BaseCdkCell","columnDef","elementRef","columnClassName","nativeElement","classList","add","CdkHeaderCell","_super","call","tslib_1.__extends","host","class","role","ElementRef","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","columns","currentValue","_columnsDiffer","find","diff","getColumnsDiff","CdkHeaderRowDef","extractCellTemplate","column","inputs","IterableDiffers","CdkFooterRowDef","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ViewContainerRef","Component","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","CdkHeaderRow","CdkFooterRow","CdkRow","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","RowViewRef","EmbeddedViewRef","CdkTable","_changeDetectorRef","_elementRef","_onDestroy","Subject","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","_multiTemplateDataRows","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","setAttribute","_trackByFn","fn","isDevMode","console","warn","_dataSource","dataSource","_switchDataSource","v","coerceBooleanProperty","_rowOutlet","length","_forceRenderDataRows","ngOnInit","_this","nodeName","_applyNativeTableSections","_dataDiffer","_i","dataRow","trackBy","dataIndex","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","ngOnDestroy","clear","_headerRowOutlet","_footerRowOutlet","next","complete","DataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","remove","view","get","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","prevCachedRenderRows","i","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","push","_getRowDefs","map","cachedRenderRows","shift","mergeQueryListAndSet","_contentColumnDefs","forEach","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","def","when","multiTemplateDataRows","_defaultRowDef","defColumnsDiffReducer","accumulator","reduce","unsubscribe","dataStream","connect","Function","Observable","isArray","observableOf","undefined","pipe","takeUntil","subscribe","_renderRow","rowDefs","renderIndex","outlet","index","createEmbeddedView","_a","_b","_getCellTemplates","cellTemplate","markForCheck","count","viewRef","first","last","even","odd","from","columnId","sections","tag","sections_1","section","element","document","createElement","appendChild","exportAs","decorators","Attribute","propDecorators","ViewChild","ContentChildren","EXPORTED_DECLARATIONS","NgModule","imports","CommonModule","exports","declarations","CdkTableModule"],"mappings":"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"}