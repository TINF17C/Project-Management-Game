{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n\n      // In case the user select the option with their mouse, we\n      // want to restore focus back to the trigger, in order to\n      // prevent the select keyboard controls from clashing with\n      // the ones from `mat-option`.\n      this.focus();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    overlayRef.setDirection(this._dir ? this._dir.value : 'ltr');\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.1.0');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n      this._overlayRef.setDirection(this._getDirection());\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._getDirection()\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string) {\n    super(_differs, _changeDetectorRef, _elementRef, role);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // If we've got a step with a decimal, we may end up with something like 33.300000000000004.\n      // Truncate the value to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));\n      }\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(elementRef, platform, document, _animationMode);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    overlayRef.setDirection(this.dir);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withTransformOriginOn('.mat-menu-panel')\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._getDirection(),\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupRef.setDirection(this._getDirection());\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._getDirection(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n\n  /** Returns the layout direction of the datepicker. */\n  private _getDirection() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (!this._initialGapCalculated) {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","this","_getLayoutDirection","labelBeforePos","selectedLabel","getOffsetLeft","labelAfterPos","getOffsetWidth","_tabList","nativeElement","offsetWidth","beforeVisiblePos","scrollDistance","afterVisiblePos","viewLength","MatTabHeader","prototype","_checkPaginationEnabled","isEnabled","scrollWidth","_elementRef","_showPaginationControls","_changeDetectorRef","markForCheck","_checkScrollingControls","_disableScrollBefore","_disableScrollAfter","_getMaxScrollDistance","_tabListContainer","_alignInkBarToSelectedTab","selectedLabelWrapper","_labelWrappers","length","toArray","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","indexFocused","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","Object","defineProperty","value","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","max","tabChangeEvent","_createChangeEvent","emit","Promise","resolve","then","forEach","tab","index","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","ngOnDestroy","unsubscribe","realignInkBar","_tabHeader","_focusChanged","event","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","style","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_dir","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","dirChange","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","transform","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","_renderChangesSubscription","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","dir","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_tabLabelCount","_updatePagination","_scrollToLabel","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_isValidIndex","_setTabFocus","containerEl","scrollLeft","_moveFocus","offset","tabs","translateX","v","_scrollHeader","scrollDir","labelIndex","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","parseFloat","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","ANIMATION_MODULE_TYPE","MatProgressSpinner","mode","platform","_animationMode","[class._mat-animation-noopable]","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","setDirection","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatSelectModule","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_isAnimating","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","svgElement","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_svgElementFromString","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","_disabledChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","svgText","_yearSelected","getYear","_activeDate","_focusActiveCell","_getActiveCell","activeDate","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","_getDirection","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","yearsPerPage","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","fromEvent","clickTarget","formField","_overlayAttached","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","autocomplete","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","_autocompleteDisabled","[attr.aria-autocomplete]","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","setActiveStyles","_active","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}