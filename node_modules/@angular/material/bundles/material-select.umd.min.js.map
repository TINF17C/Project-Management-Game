{"version":3,"file":"material-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n\n      // In case the user select the option with their mouse, we\n      // want to restore focus back to the trigger, in order to\n      // prevent the select keyboard controls from clashing with\n      // the ones from `mat-option`.\n      this.focus();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","matSelectAnimations","transformPanel","trigger","state","style","transform","minWidth","opacity","transition","group","query","animateChild","animate","fadeInContent","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","type","Directive","args","selector","MatSelectTrigger","MatSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","Subject","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","focused","controlType","ariaLabel","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","undefined","ngAfterContentInit","_initKeyManager","changes","startWith","takeUntil","subscribe","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","panelOpen","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","markForCheck","overlayDir","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","event","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","emit","offsetX","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","Promise","resolve","then","isUserInput","isArray","_clearSelection","forEach","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","reduce","result","current","index","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","ariaLabelledby","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","leftOverflow","left","rightOverflow","right","width","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","round","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","class","(keydown)","(focus)","(blur)","animations","providers","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","NgControl","Self","Attribute","Inject","propDecorators","ViewChild","CdkConnectedOverlay","ContentChildren","MatOption","descendants","MatOptgroup","panelClass","Input","customTrigger","ContentChild","required","disableOptionCentering","compareWith","errorStateMatcher","Output","NgModule","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","exports","MatFormFieldModule","declarations","MatSelectModule"],"mappings":"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"}