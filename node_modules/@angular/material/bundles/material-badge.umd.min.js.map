{"version":3,"file":"material-badge.umd.min.js","sources":["../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"],"names":["nextId","MatBadge","_document","_ngZone","_elementRef","_ariaDescriber","this","_color","_overlap","position","size","_id","Object","defineProperty","prototype","value","_setColor","val","coerceBooleanProperty","_content","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","indexOf","isAfter","ngOnDestroy","description","_badgeElement","removeDescription","textContent","content","_createBadgeElement","badgeElement","createElement","setAttribute","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","type","Directive","args","selector","host","class","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","undefined","decorators","Optional","Inject","DOCUMENT","NgZone","ElementRef","AriaDescriber","color","Input","overlap","hidden","NgModule","imports","MatCommonModule","exports","declarations","MatBadgeModule"],"mappings":"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"}